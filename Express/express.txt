Temas

-> Routing
-> HTTP express Methods 
(get, put, post, delete) Patch { get, post, put, head, delete, options, trace, copy, lock, mkcol, move, purge, propfind, proppatch, unlock, report, mkactivity, checkout, merge, m-search, notify, subscribe, unsubscribe, patch, search y connect }

- > HTTP Response 

HTTP Status codes
Code	Constant	Reason Phrase
100	CONTINUE	Continue
101	SWITCHING_PROTOCOLS	Switching Protocols
102	PROCESSING	Processing
103	EARLY_HINTS	Early Hints
200	OK	OK
201	CREATED	Created
202	ACCEPTED	Accepted
203	NON_AUTHORITATIVE_INFORMATION	Non Authoritative Information
204	NO_CONTENT	No Content
205	RESET_CONTENT	Reset Content
206	PARTIAL_CONTENT	Partial Content
207	MULTI_STATUS	Multi-Status
300	MULTIPLE_CHOICES	Multiple Choices
301	MOVED_PERMANENTLY	Moved Permanently
302	MOVED_TEMPORARILY	Moved Temporarily
303	SEE_OTHER	See Other
304	NOT_MODIFIED	Not Modified
305	USE_PROXY	Use Proxy
307	TEMPORARY_REDIRECT	Temporary Redirect
308	PERMANENT_REDIRECT	Permanent Redirect
400	BAD_REQUEST	Bad Request
401	UNAUTHORIZED	Unauthorized
402	PAYMENT_REQUIRED	Payment Required
403	FORBIDDEN	Forbidden
404	NOT_FOUND	Not Found
405	METHOD_NOT_ALLOWED	Method Not Allowed
406	NOT_ACCEPTABLE	Not Acceptable
407	PROXY_AUTHENTICATION_REQUIRED	Proxy Authentication Required
408	REQUEST_TIMEOUT	Request Timeout
409	CONFLICT	Conflict
410	GONE	Gone
411	LENGTH_REQUIRED	Length Required
412	PRECONDITION_FAILED	Precondition Failed
413	REQUEST_TOO_LONG	Request Entity Too Large
414	REQUEST_URI_TOO_LONG	Request-URI Too Long
415	UNSUPPORTED_MEDIA_TYPE	Unsupported Media Type
416	REQUESTED_RANGE_NOT_SATISFIABLE	Requested Range Not Satisfiable
417	EXPECTATION_FAILED	Expectation Failed
418	IM_A_TEAPOT	I'm a teapot
419	INSUFFICIENT_SPACE_ON_RESOURCE	Insufficient Space on Resource
420	METHOD_FAILURE	Method Failure
421	MISDIRECTED_REQUEST	Misdirected Request
422	UNPROCESSABLE_ENTITY	Unprocessable Entity
423	LOCKED	Locked
424	FAILED_DEPENDENCY	Failed Dependency
426	UPGRADE_REQUIRED	Upgrade Required
428	PRECONDITION_REQUIRED	Precondition Required
429	TOO_MANY_REQUESTS	Too Many Requests
431	REQUEST_HEADER_FIELDS_TOO_LARGE	Request Header Fields Too Large
451	UNAVAILABLE_FOR_LEGAL_REASONS	Unavailable For Legal Reasons
500	INTERNAL_SERVER_ERROR	Internal Server Error
501	NOT_IMPLEMENTED	Not Implemented
502	BAD_GATEWAY	Bad Gateway
503	SERVICE_UNAVAILABLE	Service Unavailable
504	GATEWAY_TIMEOUT	Gateway Timeout
505	HTTP_VERSION_NOT_SUPPORTED	HTTP Version Not Supported
507	INSUFFICIENT_STORAGE	Insufficient Storage
511	NETWORK_AUTHENTICATION_REQUIRED	Network Authentication Required

-> Request Body (req.body) cuando el cliente envia datos
  ejemplo 
  app.use(express.text()); // Sin esta linea, el req.body no podra interpretar lo que viene del post

app.post('/users', (req, res) => {
    console.log(req.body) // Para leer lo que viene del cliente
    res.send('New user created');
})


-> Request Params
req.params

app.get("/users/:userId", (req, res) => {
  // console.log(req.params); // Muesta el userName que se ingresa desde la peticion { userId: 'EduardoRS' }
  console.log(req.params.userId); // Muesta solo el nombre del usario EduardoRS
  res.send(`Hello world ${req.params.userId}`);
});

// Recibir parametros y extraer el tipo de dato y sumarlos
app.get("/add/:x/:y", (req, res) => {
  console.log(req.params.x);
  console.log(req.params.y);
  const add = parseInt(req.params.x) + parseInt(req.params.y);
  console.log(add);
  res.send(`Result: ${add}`);
});

// Alternativa 1 para recibir parametros usando destructuracion de objetos
app.get("/sum/:a/:b", (req, res) => {
  const { a, b } = req.params;
  const add = parseInt(a) + parseInt(b);
  console.log(add);
  res.send(`Result: ${add}`);
});

// Alternativa 2 para extraer parametros
app.get("/sumar/:a/:b", ({ params: { a, b } }, res) => {
  res.send(`Result: ${parseInt(a) + parseInt(b)}`);
});

// Retornar un archivo
app.get("/users/:username/photo", (req, res) => {
    console.log(req.params);
  if (req.params.username === "LaloRS") {
    return res.sendFile("/Users/lalors/Backend Path/Express/Mando.jpg/Mando.jpg")
  }
  res.send("User have not access");
});

//Recibir varios parametros en un endpoint
app.get("/users/:userName/age/:age", (req, res) => {
  console.log(req.params);
  res.send(`Hello ${req.params.userName} you age is ${req.params.age}`);
})

-> Queries

app.get("/users/:userName", (req, res) => {
  console.log(req.query); // Recibe la consulta (query) del cliente Ejemplo del request : http://localhost:3000/users/EduardoRS?x=KarlaRS&age=40 resultado de la consola { x: 'KarlaRS', age: '40' }
  console.log(req.query.user);
  console.log(req.query.age);
  res.send(req.params.userName);
});

app.get('/search', (req, res) => {
    console.log(req.query);
    if(req.query.q === 'books'){// query search?q=books
        return res.send("Programming library");
    } else {
        return res.send("Empty Library")
    }
})

-> All Method


-> middleware
import express from "express";
import morgan from "morgan";

const app = express();
app.use(morgan('dev'));


// Ruta accesible antes de llegar al middleware
app.get('/about', (req, res) => {
    res.send('About us');
})

//Practica Crear dos middlewares usando query antes de que el request del cliente llegue al dashboard

app.use((req, res, next) => {
    console.log('Client request is here');
    next();
})

app.use((req, res, next)=> {
    console.log(`Route: ${req.url} Method: ${req.method}`); // Sirve para obtener el url y el metodo usado en la solicitud
    if(req.query.user === "erendon"){
        // return res.send(`Hola ${req.query.user}`);
        next();
    } else {
        return res.send(`You don't have access`);
    }
})

app.get('/dashboard', (req, res) => {
    res.send('Hello world dashboard');
})

app.get('/profile', (req, res) => {
    res.send(`Hello from my profile`);
})

app.listen(3000);
console.log(`Server working on port: ${3000}`);
